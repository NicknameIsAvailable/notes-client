export const chatData = [
    {role: "user", content: "Напиши статью про хуки в React.js"},
    {role: "assistant", content: "[\n" +
            "      {\n" +
            "        \"content\": \"Хуки в React\",\n" +
            "        \"type\": \"heading-1\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хуки (hooks) - это новое API, введенное в React 16.8, которое позволяет использовать состояние и другие возможности React без написания классов.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хуки позволяют нам добавлять состояние и другие функциональности в функциональные компоненты, что ранее было доступно только в классовых компонентах.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Основные хуки\",\n" +
            "        \"type\": \"heading-2\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"В React предустановлены несколько основных хуков, которые позволяют нам управлять состоянием, эффектами и контекстом.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"useState\",\n" +
            "        \"type\": \"heading-3\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хук useState позволяет добавить состояние в функциональный компонент. Он возвращает пару значения: текущее состояние и функцию для его обновления.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"useEffect\",\n" +
            "        \"type\": \"heading-3\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хук useEffect позволяет выполнять побочные эффекты, такие как отправка запросов к серверу или подписка на события, в функциональном компоненте. Он аналогичен методам жизненного цикла componentDidMount, componentDidUpdate и componentWillUnmount в классовых компонентах.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Дополнительные хуки\",\n" +
            "        \"type\": \"heading-2\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Помимо основных хуков, в React также доступны дополнительные хуки, которые позволяют решать специфические задачи или работать с контекстом.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"useContext\",\n" +
            "        \"type\": \"heading-3\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хук useContext позволяет использовать контекст React в функциональном компоненте. Он позволяет получить значение контекста, который был определен выше в иерархии компонентов.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"useReducer\",\n" +
            "        \"type\": \"heading-3\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хук useReducer позволяет управлять состоянием компонента с помощью редуктора. Он аналогичен использованию Redux, но более прост в использовании и интегрирован непосредственно в React.\",\n" +
            "        \"type\": \"text\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Заключение\",\n" +
            "        \"type\": \"heading-1\"\n" +
            "      },\n" +
            "      {\n" +
            "        \"content\": \"Хуки в React предоставляют удобный и эффективный способ управления состоянием и другими возможностями React в функциональных компонентах. Они значительно упрощают разработку и поддержку кода, а также улучшают его читаемость и переиспользуемость.\",\n" +
            "        \"type\": \"text\"\n" +
            "      }\n" +
            "    ]"},
    {role: "assistant", content: ""},
    {role: "user", content: "Офигетьл бля"},
]