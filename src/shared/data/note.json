{
  "success": true,
  "note": {
    "id": "5f3723a6e21f7c3a12c2d4b9",
    "title": "Хуки в React.js",
    "colors": [
      "#BDD5D1",
      "#748B94",
      "#082C3C"
    ],
    "content": [
      {
        "content": "Хуки в React.js",
        "type": "heading-1"
      },
      {
        "content": "Хуки - это новое API в React.js, которое позволяет использовать состояние и другие возможности React, не писав классовые компоненты. Они были введены в React 16.8 и с тех пор стали неотъемлемой частью разработки на React.",
        "type": "text"
      },
      {
        "content": "useState",
        "type": "heading-2"
      },
      {
        "content": "useState - это хук, который позволяет добавить состояние в функциональный компонент React. Он принимает начальное состояние и возвращает пару значений: переменную со значением состояния и функцию для его обновления.",
        "type": "text"
      },
      {
        "content": "const [count, setCount] = useState(0);\n\nreturn (\n  <div>\n    <p>You clicked {count} times</p>\n    <button onClick={() => setCount(count + 1)}>Click me</button>\n  </div>\n);",
        "language": "jsx",
        "type": "code"
      },
      {
        "content": "useEffect",
        "type": "heading-2"
      },
      {
        "content": "useEffect - это хук, который позволяет выполнять побочные эффекты в функциональном компоненте. Он выполняется после каждого рендера компонента и может быть использован для подписки на события, запросов к API или изменения DOM.",
        "type": "text"
      },
      {
        "content": "useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]);",
        "language": "jsx",
        "type": "code"
      },
      {
        "content": "useContext",
        "type": "heading-2"
      },
      {
        "content": "useContext - это хук, который позволяет получать значение контекста из родительского компонента без явной передачи пропсов. Он принимает объект контекста и возвращает текущее значение контекста.",
        "type": "text"
      },
      {
        "type": "list",
        "list": [
          "Первый элемент",
          "Второй",
          "Так далее"
        ]
      },
      {
        "type": "table",
        "table": {
          "header": [
            "Имя",
            "Фамилия",
            "Отчество"
          ],
          "body": [
            [
              "Леха",
              "Тараканов",
              "Неважно"
            ],
            [
              "Альберт",
              "Кронштейн",
              "Станиславович"
            ],
            [
              "Никола",
              "Кресло",
              "Андреевич"
            ]
          ]
        }
      },
      {
        "type": "todo-list",
        "list": [
          {
            "done": true,
            "content": "Помыть попу"
          },
          {
            "done": false,
            "content": "Почистить хуй"
          }
        ]
      },
      {
        "type": "num-list",
        "list": [
          "Первый элемент",
          "Второй",
          "Так далее"
        ]
      },
      {
        "content": "const theme = useContext(ThemeContext);",
        "language": "jsx",
        "type": "code"
      },
      {
        "content": "useReducer",
        "type": "heading-2"
      },
      {
        "content": "useReducer - это хук, который позволяет использовать редуктор для управления состоянием компонента. Он принимает редуктор и начальное состояние, и возвращает текущее состояние и функцию для его обновления.",
        "type": "text"
      },
      {
        "content": "const [state, dispatch] = useReducer(reducer, initialState);",
        "language": "jsx",
        "type": "code"
      },
      {
        "content": "Это только небольшая часть доступных хуков в React.js. Они позволяют писать более чистый и понятный код, упрощая разработку компонентов. Вам рекомендуется ознакомиться с документацией React.js для полного списка их возможностей.",
        "type": "caption"
      }
    ]
  }
}